{"version":3,"sources":["Components/contactsForm/ContactsFormStyled.js","Components/contactsForm/ContactsForm.js","Components/contactsListItem/ContactsListItemStyled.js","Components/contactsListItem/ContactsListItem.js","Components/contactsList/ContactsListStyled.js","Components/contactsList/ContactsList.js","Components/filter/FilterStyled.js","Components/filter/Filter.js","styles/globalStyles.js","Components/App.js","index.js"],"names":["FormContainer","styled","form","ContactsForm","state","name","number","onFormChange","e","target","value","setState","onFormSubmit","preventDefault","props","addContact","id","uuidv4","onSubmit","this","className","type","onChange","pattern","title","required","Component","ContactsListItemContainer","li","ContactsListItem","contact","removeContactById","onClick","ContactsListContainer","ul","ContactsList","contacts","map","FilterContainer","label","Filter","GlobalStyles","createGlobalStyle","App","filter","some","item","toLowerCase","alert","prev","onFilterChange","contactsFilter","normalizedFilter","includes","contactsArr","localStorage","getItem","parsedContacts","JSON","parse","prevProps","prevState","setItem","stringify","visibleContacts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.980695af.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const FormContainer = styled.form`\n    display: flex;\n    flex-direction: column;\n\n    .formLabel {\n        margin-bottom: 20px;\n    }\n\n    .formInput {\n        background-color: #fff;\n        border: 1px solid #d5d9d9;\n        border-radius: 8px;\n        box-shadow: rgba(213, 217, 217, .5) 0 2px 5px 0;\n        box-sizing: border-box;\n        color: #0f1111;\n        cursor: pointer;\n        height: 25px;\n    }\n\n    .formText {\n        margin-bottom: 7px;\n        font-size: 18px;\n        line-height: 29px;\n    }\n\n    .addContactBtn {\n        width: 100px;\n    }\n\n`","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { FormContainer } from './ContactsFormStyled';\n\nclass ContactsForm extends Component {\n    state = { \n        name: '',\n        number: ''\n    };\n\n    onFormChange = (e) => {\n        const {name, value} = e.target;\n        this.setState({ [name]: value });\n    };\n\n    onFormSubmit = (e) => {\n        const {name, number} = this.state;\n        e.preventDefault();\n        this.props.addContact({name: name, id:uuidv4(), number: number});\n    };\n    \n    render() {\n        return (\n            <FormContainer onSubmit={this.onFormSubmit}>\n                    <span className=\"formText\">Name:</span>\n                    <label className=\"formLabel\">\n                        <input\n                            className=\"formInput\"\n                            type=\"text\"\n                            name=\"name\"\n                            onChange={this.onFormChange}\n                            value={this.state.name}\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                            required\n                        />\n                    </label>\n                    <span className=\"formText\">Number:</span>\n                    <label className=\"formLabel\">\n                        <input\n                            className=\"formInput\"\n                            type=\"tel\"\n                            name=\"number\"\n                            onChange={this.onFormChange}\n                            value={this.state.number}\n                            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                            required\n                            />\n                    </label>\n                    <button className=\"addContactBtn\" type=\"submit\">\n                        Add contact\n                    </button>\n            </FormContainer>\n        );\n    }\n}\n\nexport default ContactsForm;","import styled from 'styled-components';\n\nconst ContactsListItemContainer = styled.li`\n    display: flex;\n    flex-direction: row;\n    align-items: baseline;\n    margin-bottom: 15px;\n    font-size: 16px;\n    line-height: 29px;\n\n    .deleteBtn {\n        width: 65px;\n        margin-left: 10px;\n        margin-bottom: 0;\n    }\n`;\n\nexport default ContactsListItemContainer;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ContactsListItemContainer from './ContactsListItemStyled';\n\nconst ContactsListItem = ({contact, removeContactById}) => {\n    const remove = () => removeContactById(contact.id);\n    return (\n        <ContactsListItemContainer>\n            <span>{contact.name}: {contact.number}</span>\n            <button className=\"deleteBtn\" type=\"button\" onClick={remove}>Delete</button>\n        </ContactsListItemContainer>\n    );\n};\n\nContactsListItem.propTypes = {\n    contact: PropTypes.object,\n    removeContactById: PropTypes.func\n};\n\nexport default ContactsListItem;","import styled from 'styled-components';\n\nconst ContactsListContainer = styled.ul`\n    display: flex;\n    flex-direction: column;\n`;\n\nexport default ContactsListContainer;","import React from 'react';\nimport ContactsListItem from '../contactsListItem/ContactsListItem';\nimport PropTypes from 'prop-types';\nimport ContactsListContainer from './ContactsListStyled';\n\nconst ContactsList = ({contacts, removeContactById}) => {\n    return (\n        <ContactsListContainer>\n            {contacts.map((contact)=> \n                <ContactsListItem contact={contact} removeContactById={removeContactById}/>\n            )}\n        </ContactsListContainer>\n    );\n};\n\nContactsList.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object),\n    removeContactById: PropTypes.func\n};\n\nexport default ContactsList;\n\n","import styled from 'styled-components';\n\nconst FilterContainer = styled.label`\n    display: flex;\n    flex-direction: column;\n\n    .filterText {\n        margin-bottom: 7px;\n        font-size: 18px;\n        line-height: 29px;\n    }\n\n    .filterInput{\n        height: 25px;\n        width: 151px;\n        background-color: #fff;\n        border: 1px solid #d5d9d9;\n        border-radius: 8px;\n        box-shadow: rgba(213, 217, 217, .5) 0 2px 5px 0;\n        box-sizing: border-box;\n        color: #0f1111;\n        cursor: pointer;\n        margin-bottom: 20px;\n    }\n`;\n\nexport default FilterContainer;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FilterContainer from './FilterStyled';\n\n\nconst Filter = ({value, onChange}) => {\n    return (\n        <FilterContainer>\n            <span className=\"filterText\">Find contacts by name</span>\n            <input \n                className=\"filterInput\"\n                type=\"text\" \n                name=\"filter\"\n                value={value}\n                onChange={onChange}\n            />\n        </FilterContainer>\n    );\n};\n\nFilter.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func\n};\n\nexport default Filter;","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n    body {\n        font-family: \"Amazon Ember\",sans-serif;\n        padding: 25px;\n    }\n\n    ul{\n        list-style: none;\n        padding: 0;\n    }\n\n    button {\n        background-color: #fff;\n        border: 1px solid #d5d9d9;\n        border-radius: 8px;\n        box-shadow: rgba(213, 217, 217, .5) 0 2px 5px 0;\n        box-sizing: border-box;\n        color: #0f1111;\n        cursor: pointer;\n        display: flex;\n        margin-bottom: 20px;\n        font-family: \"Amazon Ember\",sans-serif;\n        font-size: 13px;\n        line-height: 29px;\n        padding: 0 10px 0 11px;\n        position: relative;\n        text-align: center;\n        text-decoration: none;\n        vertical-align: middle;\n    }\n\n    button:hover {\n        background-color: #f7fafa;\n    }\n\n    button:focus {\n        border-color: #008296;\n        box-shadow: rgba(213, 217, 217, .5) 0 2px 5px 0;\n        outline: 0;\n    }\n\n    h1,\n    h2 {\n        margin-top: 0;\n    }\n`;\n\nexport default GlobalStyles;","import React, { Component } from 'react';\nimport ContactsForm from './contactsForm/ContactsForm';\nimport ContactsList from './contactsList/ContactsList';\nimport Filter from './filter/Filter';\nimport GlobalStyles from '../styles/globalStyles';\n\nclass App extends Component {\n    state = { \n        contacts: [],\n        filter: ''\n    };\n\n    componentDidMount() {\n        const contactsArr = localStorage.getItem('contacts');\n        const parsedContacts = JSON.parse(contactsArr);\n\n        if(parsedContacts) {\n            this.setState({contacts: parsedContacts});\n        };\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.contacts !== prevState.contacts) {\n            localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n        };\n    };\n\n    addContact = (contact) => {\n        const {contacts} = this.state;\n        const isCopy = contacts.some((item) => \n               item.name.toLowerCase() === contact.name.toLowerCase()\n            );\n        if(isCopy) {\n            alert(`${contact.name} is already in contacts.`);\n            return;\n        }\n        this.setState((prev) => ({\n            contacts: [...prev.contacts, contact]\n        }));\n    };\n\n    removeContactById = (id) => {\n        this.setState((prev) => ({\n            contacts: [...prev.contacts.filter(contact => contact.id !== id)]\n        }));\n    };\n\n    onFilterChange = (e) => {\n        const {name, value} = e.target;\n        this.setState({ [name]: value });\n    };\n\n    contactsFilter = (e) => {\n        const {contacts, filter} = this.state;\n        const normalizedFilter = filter.toLowerCase();\n        return contacts.filter(contact => \n            contact.name.toLowerCase().includes(normalizedFilter)\n        );\n    };\n\n    render() {\n        const visibleContacts = this.contactsFilter();\n        return (\n            <main>\n                <GlobalStyles></GlobalStyles>\n                <h1>Phonebook</h1>\n                <ContactsForm addContact={this.addContact}/>\n                <Filter \n                    value={this.state.filter} \n                    onChange={this.onFilterChange}\n                />\n                <h2>Contacts</h2>\n                <ContactsList \n                    contacts={visibleContacts} \n                    removeContactById={this.removeContactById}\n                />\n            </main>\n\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}